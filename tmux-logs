#!/bin/sh

TMUX_SESSION_NAME=$(tmux display-message -p "#S")
NAMESPACE=$KUBECTL_PLUGINS_CURRENT_NAMESPACE
SELECTOR=$KUBECTL_PLUGINS_LOCAL_FLAG_SELECTOR
CONTAINER=$KUBECTL_PLUGINS_LOCAL_FLAG_CONTAINER

# creates a new tmux window
createNewTmuxWindow() {
    tmux new-window $1
}

# ensure tmux executable exists
ensureTmuxExists() {
    if [ -z "$(which tmux)" ]; then
        echo "tmux executable not found ... is it installed?"
        exit 1
    fi
}

# ensure desired tmux session exists, otherwise exit
ensureTmuxSessionExists() {
    if ! tmux ls 2> /dev/null | grep -q "${TMUX_SESSION_NAME}: "; then
        echo "Failed to connect to tmux session."
        exit 1
    fi
}

# gets pod and container names from a name selector
getPodContainers() {
    if [ -z "${CONTAINER}" ]; then
        GO_TEMPLATE="{{range .items}}{{\$name:=.metadata.name}}{{range .spec.containers}}{{print \$name}}_{{.name}} {{end}}{{end}}"
    else
        GO_TEMPLATE="{{range .items}}{{\$name:=.metadata.name}}{{range .spec.containers}}{{if eq .name \"${CONTAINER}\"}}{{print \$name}}_{{.name}} {{end}}{{end}}{{end}}"
    fi

    if [ -z "${SELECTOR}" ]; then
        kubectl get pods -n ${NAMESPACE} -o go-template --template="${GO_TEMPLATE}"
    else
        kubectl get pods -n ${NAMESPACE} -l "${SELECTOR}" -o go-template --template="${GO_TEMPLATE}"
    fi
}

# switch the tmux window layout
selectTmuxLayout() {
    tmux select-layout $1
}

# creates a new tmux window
splitTmuxWindow() {
    tmux split-window $1
}

# set synchronization for current tmux window
synchronizePanes() {
    tmux set-window-option synchronize-panes "on"
}

# unset synchronization for current tmux window
unsynchronizePanes() {
    tmux set-window-option synchronize-panes "off"
}

tailContainerLogs() {
    INDEX=0

    POD_CONTAINERS=$(getPodContainers)

    for POD_CONTAINER in ${POD_CONTAINERS}; do
        POD_CONTAINER_SPACED="${POD_CONTAINER/_/ }"
        KUBECTL_LOGS_COMMAND="kubectl -n ${NAMESPACE} logs -f ${POD_CONTAINER_SPACED}"
        if [ ${INDEX} -eq 0 ]; then
            createNewTmuxWindow "${KUBECTL_LOGS_COMMAND}"
        else
            splitTmuxWindow "${KUBECTL_LOGS_COMMAND}"
            selectTmuxLayout tiled
        fi
        INDEX=$((INDEX+1))
    done

    if [ ${INDEX} -eq 0 ]; then
        echo "No matching pods found!"
    fi
}

# execute pre-command checks
ensureTmuxExists
ensureTmuxSessionExists

# tail container logs
tailContainerLogs

# synchronize panes
synchronizePanes
